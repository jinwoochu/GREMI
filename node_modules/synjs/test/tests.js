/**
 * Created by amax on 5/27/2016.
 */

QUnit.test("SynJS", function( assert ) {
    var thenable = new Promise(function (resolve, reject) {
        setTimeout(function () {
            runTests(resolve,reject);
        },100);
    });
    return thenable;
});


function runTests(resolve,reject) {
    var MyClass = function (a,b) {
        this.a = a;
        this.b = b;
    };

    MyClass.prototype.myTestFunction1 = function(paramA,paramB) {
        var res = [];
        var i=100, j=i*2;
        var k = i+j;
        {
            res.push(['step 010',i,j,k]);
            SynJS.wait(10);
            i++;
            SynJS.wait(10);
        }
        {
            res.push(['step 020',i,j,k]);
            i++;
            SynJS.wait(10); // this is inline comment
            res.push(['step 030',i,j,k]);
            i++;
        }
        {{/*comment*/{
            res.push(['step 040',i,j,k]);
        }}}
        {
            i+=6;
            {i*=5}
            /*
            this is multy
            line comment
             */
        }
        for(var l=1; l<50; l++) {
            j+=(k-5)+i;
            res.push(['step 050',i,j,k]);
            j+=(k-12)+i;
            if(l==3)
                k-=1;
            if(l%2 == 0) {
                res.push(['step 060',i,j,k]);
                k*=2;
            }
            else
                SynJS.wait(100);
            if(l==35){
                {
                    break;
                }
            }
            res.push('step 070 '+l, [i,j,k,paramA,paramB]);
        }

        lbl1: for (var i = 0, j = 100; i <= 100; i++, j--)
            switch (i) {
                case 3:
                case 4:
                case 5,6,7:
                    res.push("step 80[" + i + "][" + j + "]");
                default:
                    res.push("step 90[" + i + "][" + j + "]");
                case 10:
                    res.push("step 100 [" + i + "][" + j + "]");
                    break;
                case 20:
                    res.push("step 110[" + i + "][" + j + "]");
                case 21: {
                    res.push("step 121[" + i + "][" + j + "]");
                    break;
                }
                case 22:
                    res.push("step 122[" + i + "][" + j + "]");
                case 80:
                    break lbl1;
            }

        var obj = {a:1, b:2, c:3};
        for (var prop in obj) {
            res.push(obj[prop]);
            SynJS.wait(1);
        }

        for (var prop in obj)
            res.push(obj[prop]);

        for(var l=1; l<50; l++) {
            j+=(k-5)+i;
            j+=(k-12)+i;
            switch (l) {
                case 1,2:
            }
            if(l==3)
                k-=1;
            if(l%2 == 0) {
                k*=2;
            }
            else
                SynJS.wait(10);
            if(l==38) {
                {
                    {
                        return res;
                    }
                }
            }
            res.push('step 080 '+l, [i,j,k,paramA,paramB]);
        }

    };

    var myObj  = new MyClass('A','B');

    // capture native run results
    var expected = myObj.myTestFunction1(53,53,56,56);

    // capture SynJS run results

    SynJS.run(myObj.myTestFunction1,myObj,53,53,56,56,function (actual) {
        console.log('Done',actual);
        deepEqual(actual,expected);
        resolve("OK");
    });
}

function deg2rad(deg) {
    return deg * (Math.PI/180)
}